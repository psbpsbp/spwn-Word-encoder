extract $

to_string = (a,b,c,d,e,) {
    return [a,b,c,d,e,]
}
to_number = (a) {
    let f = 0
    if a == "A" {
        f = 1
    } else if a == "B" {
        f = 2
    } else if a == "C" {
        f = 3
    } else if a == "D" {
        f = 4
    } else if a == "E" {
        f = 5
    } else if a == "F" {
        f = 6
    } else if a == "G" {
        f = 7
    } else if a == "H" {
        f = 8
    } else if a == "I" {
        f = 9
    } else if a == "J" {
        f = 10
    } else if a == "K" {
        f = 11
    } else if a == "L" {
        f = 12
    } else if a == "M" {
        f = 13
    } else if a == "N" {
        f = 14
    } else if a == "O" {
        f = 15
    } else if a == "P" {
        f = 16
    } else if a == "Q" {
        f = 17
    } else if a == "R" {
        f = 18
    } else if a == "S" {
        f = 19
    } else if a == "T" {
        f = 20
    } else if a == "U" {
        f = 21
    } else if a == "V" {
        f = 22
    } else if a == "W" {
        f = 23
    } else if a == "X" {
        f = 24
    } else if a == "Y" {
        f = 25
    } else {
        f = 26
    } 
    return f
}

wto_number = (a,b,c,d,e,) {
    return [to_number(a),to_number(b),to_number(c),to_number(d),to_number(e)]
}

list_to_numbers = (a,b) {
    let b = b
    let c = 0
    let d = []
    while c < a.length {
    if c+4 > a.length {
        break;
    } else {
        d.push(to_string(a[c],a[c+1],a[c+2],a[c+3],a[c+4]))
        c += 6
    }
    }
    let e = 0
    while e < d.length {
        b.push(wto_number(d[e][0],d[e][1],d[e][2],d[e][3],d[e][4]))
        e ++
    }
    return b
}